O operador de crossover guloso implementado funciona da seguinte forma:

CROSSOVER-GULOSO(P1, P2)
Entrada: pais P1 e P2
Saída: filho F
01 F <- []
02 v <- Vértice-Aleatório(P1)
03 Adiciona(F, v)
04 Enquanto Tam(F) < Tam(P1)
05     u1 <- prox(P1, v)
06     u2 <- prox(P2, v)
07     umin <- arg(min(dist(v,u))) u = {u1, u2}
08     umax <- arg(max(dist(v, u))) u = {u1, u2}
09     Se umin não pertence a F
10         v <- umin
11     Senão se umax não pertence a F
12         v <- umax
13     Senão
14         u3 <- arg(min(dist(v, (P1 - F))))
15         v <- u3
16     Adiciona(F, v)
17 Retorna F


1 P N Existem métodos de primeira e segunda ordem que tiram proveito do fato da função ser derivável e conseguem chegar rapidamente a uma solução. Um problema destes métodos porém, é que eles param ao encontrar o primeiro mínimo local. Outras heurísticas, como simulated annealing por exemplo, podem ser usadas para amenizar esta dificuldade.
2 P R Como a função de avaliação é não-derivável métodos de primeira e segunda ordem não são aplicáveis. 
3 P D Caso a função de avaliação apresente muita diferença entre indivíduos próximos no espaço de soluções o algoritmo evolutivo se torna ineficiente.
4 P D O fato da função de avaliação não estar especificada dificulta determinar se um algoritmo evolutivo seria uma boa abordagem. Além disso, como o espaço de solução é não limitado é muito difícil estimar um tamanho de população adequado para realizar uma boa amostragem do problema.
5 P R 
6 P R Um algoritmo evolutivo poderia encontrar boas soluções neste caso desde que usasse técnicas, como a divisão por nichos por exemplo, para encontrar os vários ótimos.